[
    {
      "globs": ["**/*.js", "**/*.mjs"],
      "rule": "Use ES modules (import/export) in all JavaScript. No globals; everything flows through imports/exports. Prefer const/let over var. camelCase for variables/functions; PascalCase for classes. Keep functions small and single-responsibility; avoid long functions (>50 lines) and >5 parameters."
    },
    {
      "globs": ["**/*.js", "**/*.ts"],
      "rule": "Every file begins with a header comment explaining its role in the project. Use JSDoc for complex functions (params/returns), and define typedefs for core types (Board, Move, PlayerId, IntersectionId)."
    },
    {
      "globs": ["**/*"],
      "rule": "Follow strict modular separation: /core = logic, /ui = rendering & interaction, /game = orchestration, /utils = helpers, /data = static. Do not mix concerns across folders."
    },
    {
      "globs": ["core/**/*.js"],
      "rule": "Pure game logic only. No DOM, CSS, timers, or rendering. Functions must be deterministic and side-effect free. Do not import from /ui or manipulate the document."
    },
    {
      "globs": ["core/rules.js"],
      "rule": "Expose pure functions: isValidMove(board, move), applyMove(board, move) (returns new board/state; do not mutate inputs), checkWin(board). No randomness here (use utils/rng if needed, seeded via caller)."
    },
    {
      "globs": ["core/board.js"],
      "rule": "Define board data structures and helpers: createBoard(data), cloneBoard(board), getNeighbors(id), serialize/deserialize. Treat board/state as immutable (copy-on-write) and avoid hidden mutations."
    },
    {
      "globs": ["ui/**/*.js"],
      "rule": "Rendering & interaction only. Use SVG (<circle>, <line>, <path>) for board and pieces. No rules logic, no win checks, no state transitions beyond visual state. Style via CSS classes, not inline styles."
    },
    {
      "globs": ["ui/graphics.js"],
      "rule": "Pure drawing utilities for the <svg id='board'> element: drawBoard(data), drawPieces(board), highlight(intersectionIds), clearHighlights(). Ensure responsive SVG viewBox; do not compute game legality here."
    },
    {
      "globs": ["ui/interactions.js"],
      "rule": "Attach SVG event listeners and translate raw events into structured move intents, e.g. { type: 'place', intersectionId, playerId }. Do not validate moves here; do not modify core state; emit events/callbacks to GameManager."
    },
    {
      "globs": ["ui/animations.js"],
      "rule": "Optional visual effects (captures, highlights) using requestAnimationFrame or CSS transitions. No timing logic that influences rules; visuals only."
    },
    {
      "globs": ["game/**/*.js"],
      "rule": "Orchestrate play. GameManager owns the current state and turn order, calls core/rules for validation & application, then triggers UI updates. No direct DOM manipulation beyond calling /ui utilities."
    },
    {
      "globs": ["game/gameManager.js"],
      "rule": "Implements the move pipeline: (1) receive move intent from /ui, (2) validate via core/rules.isValidMove, (3) apply via core/rules.applyMove to produce a new state, (4) checkWin, (5) render via /ui, (6) advance turn."
    },
    {
      "globs": ["game/player.js"],
      "rule": "Define HumanPlayer and AIPlayer interfaces. AI must not access DOM; it should receive board/state and produce a move intent. HumanPlayer wiring is via callbacks from /ui/interactions provided by GameManager."
    },
    {
      "globs": ["game/ai.js"],
      "rule": "Encapsulate AI strategy (heuristics/search). Must be pure and time/iteration-bounded. No DOM, no random by default; if randomness is required, accept a seeded RNG from caller."
    },
    {
      "globs": ["utils/**/*.js"],
      "rule": "Generic helpers only: deepCopy, RNG (seedable), logger, clamp, array/set helpers. No DOM, no project-specific rules logic. Keep utilities small and reusable."
    },
    {
      "globs": ["utils/logger.js"],
      "rule": "Provide leveled logging (debug/info/warn/error). Avoid console.* directly elsewhere; route through logger to keep output consistent and easy to disable."
    },
    {
      "globs": ["data/**/*.json"],
      "rule": "Static configuration only (e.g., board geometry, intersections, edges). Include { \"schema\": \"amalgam-board@1\", \"version\": \"x.y\" } fields. Do not encode logic; keep numeric arrays compact and documented."
    },
    {
      "globs": ["index.html"],
      "rule": "Minimal markup with <svg id='board'></svg> for the game area and a right-side panel as needed. No inline event handlers; load scripts with type='module' and defer. Accessibility: set appropriate ARIA roles/labels."
    },
    {
      "globs": ["style.css"],
      "rule": "CSS handles layout and presentation only. Board left, side panel right. SVG responsive via viewBox and max-width. Use classes for piece states (e.g., .piece--p1, .piece--selected, .cell--legal)."
    },
    {
      "globs": ["main.js"],
      "rule": "Entry point: load /data, create initial board via core/board, instantiate GameManager, wire /ui/interactions callbacks to GameManager, and trigger initial render. Keep this file thin."
    },
    {
      "globs": ["tests/**/*.js"],
      "rule": "Unit-test the core logic (rules/board) with deterministic fixtures. Snapshot representative board states and verify isValidMove/applyMove/checkWin. No DOM in tests."
    },
    {
      "globs": ["**/*.js"],
      "rule": "Avoid circular dependencies. Prefer dependency direction: core → (none), ui → (utils), game → (core, ui, utils), main → (game, core, ui, utils)."
    },
    {
      "globs": ["**/*.js"],
      "rule": "Error handling: core/rules returns explicit results (e.g., { ok: true, nextBoard } | { ok: false, reason }). GameManager logs user-facing messages; UI reflects status. Do not throw for expected invalid moves."
    },
    {
      "globs": ["**/*.js"],
      "rule": "Define and reuse a canonical Move object: { type: 'place' | 'pass' | 'resign', intersectionId?: number, playerId: PlayerId, meta?: object }. Keep it consistent across ui → game → core."
    },
    {
      "globs": ["**/*.json"],
      "rule": "JSON must be valid, UTF-8, without comments. Large numeric arrays may be split across lines for readability. If schema changes, bump the version and provide a migration note."
    },
    {
      "globs": ["**/*"],
      "rule": "Prefer readability over cleverness; consistent formatting. Keep commit diffs small and messages meaningful. Document new modules with a brief rationale in the header."
    }
  ]
  